{"version":3,"file":"static/js/247.660b368e.chunk.js","mappings":"uMAoCA,UA9Ba,WACX,OAAwBA,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAOR,OALAE,EAAAA,EAAAA,YAAU,YACRC,EAAAA,EAAAA,IAAUC,EAAAA,EAAAA,aAAuBJ,IAAUK,MAAK,YAAyB,IAAdP,EAAa,EAArBQ,KAAQR,KACzDC,EAAQD,EACT,GACF,GAAE,CAACE,KAEF,wBACGF,EAAKS,KAAI,gBAAGC,EAAH,EAAGA,aAAcC,EAAjB,EAAiBA,KAAMC,EAAvB,EAAuBA,UAAWC,EAAlC,EAAkCA,QAAlC,OACR,2BACE,gBACEC,MAAM,MACNC,IACEL,EAAY,yCAC0BA,GAClC,kHAENM,IAAKL,KAEP,uBAAIA,KACJ,uCAAeC,OAXRC,EADD,KAiBf,C,6HC/BKI,EAAgBC,EAAAA,EAAAA,OAAa,CACjCC,QAAS,gCACTC,OAAQ,CACNC,QAAS,sCAIAhB,EAAY,SAACiB,EAAKC,GAC7B,OAAON,EAAc,CACnBK,IAAAA,EACAF,OAAQ,CAAEG,MAAOA,KAEhBhB,MAAK,kBAAmC,CAAEC,KAArC,EAAGA,KAAwCgB,OAA3C,EAASA,OAA0CC,WAAnD,EAAiBA,WAAjB,IACLC,OAAM,SAAAC,GACLC,EAAAA,GAAAA,MAAYD,EACb,GACJ,ECnBYE,EAAW,SAACC,GAAD,+CAAkDA,EAAlD,ECAXC,EAAwB,SAAAC,GAAU,OAC7CA,EAAWC,QAAO,SAACC,EAAD,GAA8B,IAAjBC,EAAgB,EAAhBA,GAAIC,EAAY,EAAZA,MAEjC,OADAF,EAASG,KAAK,CAAEF,GAAAA,EAAIC,MAAAA,IACbF,CACR,GAAE,GAJ0C,C,oBCS/C,IATkB,CAChBI,SAAU,qBACVC,OAAQ,mBACRC,OAAQ,gBACRC,aAAc,SAAAvC,GAAO,uBAAcA,EAAd,EACrBwC,aAAc,SAAAxC,GAAO,uBAAcA,EAAd,aACrByC,aAAc,SAAAzC,GAAO,uBAAcA,EAAd,a","sources":["components/Cast/Cast.jsx","components/helpers/fetchData.js","components/helpers/imagePath.js","components/helpers/parseDataForMovieList.js","constants/QueryPath/QueryPath.js"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport QueryPath from 'constants/QueryPath/QueryPath';\nimport { fetchData } from 'components/helpers/Api';\n\nimport { useParams } from 'react-router-dom';\n\nconst Cast = () => {\n  const [cast, setCast] = useState([]);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    fetchData(QueryPath.movieCredits(movieId)).then(({ data: { cast } }) => {\n      setCast(cast);\n    });\n  }, [movieId]);\n  return (\n    <ul>\n      {cast.map(({ profile_path, name, character, cast_id }) => (\n        <li key={cast_id}>\n          <img\n            width=\"100\"\n            src={\n              profile_path\n                ? `https://image.tmdb.org/t/p/w300${profile_path}`\n                : 'https://static.vecteezy.com/system/resources/previews/005/337/799/original/icon-image-not-found-free-vector.jpg'\n            }\n            alt={name}\n          />\n          <p>{name}</p>\n          <p>Character: {character}</p>\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nexport default Cast;\n","import axios from 'axios';\nimport { toast } from 'react-toastify';\n\nconst instanseAxios = axios.create({\n  baseURL: 'https://api.themoviedb.org/3/',\n  params: {\n    api_key: 'c887019741c8f0f75dbac80f70612516',\n  },\n});\n\nexport const fetchData = (url, query) => {\n  return instanseAxios({\n    url,\n    params: { query: query },\n  })\n    .then(({ data, status, statusText }) => ({ data, status, statusText }))\n    .catch(err => {\n      toast.error(err);\n    });\n};\n","export const imagePath =(poster_path)=> `https://image.tmdb.org/t/p/w500${poster_path}`;","export const parseDataForMovieList = movieArrey =>\n  movieArrey.reduce((resArrey, { id, title }) => {\n    resArrey.push({ id, title });\n    return resArrey;\n  }, []);","const QueryPath = {\n  trending: 'trending/movie/day',\n  genres: 'genre/movie/list',\n  search: '/search/movie',\n  movieDetails: movieId => `/movie/${movieId}`,\n  movieCredits: movieId => `/movie/${movieId}/credits`,\n  movieReviews: movieId => `/movie/${movieId}/reviews`,\n};\n\nexport default QueryPath;\n"],"names":["useState","cast","setCast","movieId","useParams","useEffect","fetchData","QueryPath","then","data","map","profile_path","name","character","cast_id","width","src","alt","instanseAxios","axios","baseURL","params","api_key","url","query","status","statusText","catch","err","toast","imagePath","poster_path","parseDataForMovieList","movieArrey","reduce","resArrey","id","title","push","trending","genres","search","movieDetails","movieCredits","movieReviews"],"sourceRoot":""}